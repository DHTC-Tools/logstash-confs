input { stdin { } }


output {
    if !("_grokparsefailure" in [tags]) {
        elasticsearch {
            protocol => "http"
            host => "uct2-es-door.mwt2.org"
            index => "DCACHE_INDEX"
            index_type => "%{request_type}"
            cluster => "dataanalytics"

        }
#        stdout { codec => rubydebug }
    }
#    if ("_grokparsefailure" in [tags]) {
#        stdout { codec => json }
#    }
}


filter {
    grok {
        patterns_dir => "./patterns"

        # transfer requests
        match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{CELL_FRAGMENT} %{PNFS_FRAGMENT} %{DCACHE_PATH} %{STORAGE_FRAGMENT} %{INT:bytes_transferred:int} %{INT:connection_time:int} %{WORD:created} \{%{PROTOCOL:protocol}\} %{INITIATOR_FRAGMENT} %{RESULT_FRAGMENT}"}
        #
        match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{CELL_FRAGMENT} %{PNFS_FRAGMENT} %{DCACHE_PATH} %{RESULT_FRAGMENT}"}
        # REQUEST message
        match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{CELL_FRAGMENT} %{REQUESTINFO} %{PNFS_FRAGMENT} %{DCACHE_PATH} %{STORAGE_FRAGMENT} %{INT:transaction_time:int} %{INT:queuing_time:int} %{RESULT_FRAGMENT}"}
        match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{CELL_FRAGMENT} %{PNFS_FRAGMENT} %{DCACHE_PATH} %{INT:transfer_time:int} %{INT:queuing_time:int} %{RESULT_FRAGMENT}"}
    }

    date {
        remove_field => timestamp
        match => ["timestamp", "ISO8601"]
    }
}


