input { stdin { } }


output {
    if !("_grokparsefailure" in [tags]) {
        elasticsearch {
            protocol => "http"
            host => "uct2-es-door.mwt2.org"
            index => "DCACHE_INDEX"
            index_type => "billing_record"
            cluster => "dataanalytics"

        }
#        stdout { codec => rubydebug }
    }
#    if ("_grokparsefailure" in [tags]) {
#        stdout { codec => json }
#    }
}


# MoverInfoMessage filter
filter {
    grok {
        patterns_dir => "./patterns"
        match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{WORD:cell_type}:%{CELLNAME:cell_name}:%{WORD:request_type}\] \[%{BASE16NUM:pnfs_id},%{INT:filesize:int}] \[%{UNIXPATH:path}\] \[Unknown\] %{INT:bytes_transferred:int} %{INT:connection_time:int} %{WORD:created} %{WORD:protocol} %{WORD:initiator} \{%{INT:result_code:int}:%{QS:message}\}"}
    }

    date {
        remove_field => timestamp
        match => ["timestamp", "ISO8601"]
    }
    if [bytes_transferred] {
        mutate {
            update => ["type", "mover_message"]
        }
    }

}

# RemoveFileInfoMessage filter
filter {
    grok {
        match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{WORD:cell_type}:%{WORD:cell_name}:%{WORD:request_type}\] \[%{BASE16NUM:pnfs_id},%{INT:filesize:int}] \[%{UNIXPATH:path}\] \[Unknown\] \{%{INT:result_code:int}:%{QS:message}\}"}
    }

    if !("_grokparsefailure" in [tags]) {
        mutate {
            update => ["type", "remove_message"]
        }
    }
}

# DoorRequestInfoMessage filter
filter {
    grok {
        match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{WORD:cell_type}:%{WORD:cell_name}:%{WORD:request_type}\] \[%{QS:owner}:%{INT:uid:int}:%{INT:gid:int}:%{IP:client}\] \[%{BASE16NUM:pnfs_id},%{INT:filesize:int}] \[%{UNIXPATH:path}\] \[Unknown\]  %{INT:transaction_time:int} %{INT:queuing_time:int} \{%{INT:result_code:int}:%{QS:message}\}"}
    }

    date {
        remove_field => timestamp
        match => ["timestamp", "ISO8601"]
    }
    if [owner] {
        mutate {
            update => ["type", "door_request"]
        }
    }
}

# StorageInfoMessage filter
filter {
    grok {
        match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{WORD:cell_type}:%{WORD:cell_name}:%{WORD:request_type}\] \[%{BASE16NUM:pnfs_id},%{INT:filesize:int}] \[%{UNIXPATH:path}\] \[Unknown\] %{INT:transfer_time:int} %{INT:queuing_time:int} \{%{INT:result_code:int}:%{QS:message}\}"}
    }

    date {
        remove_field => timestamp
        match => ["timestamp", "ISO8601"]
    }
    if [transfer_time] {
        mutate {
            update => ["type", "storage_message"]
        }
    }
}

