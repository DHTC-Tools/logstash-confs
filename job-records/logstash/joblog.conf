
input { stdin { } }


output { 
    if !("_grokparsefailure" in [tags]) {
        elasticsearch {
            protocol => "http"
            host => "uct2-es-door.mwt2.org"
            index => "ES_INDEX"
            index_type => "job_record"
            cluster => "dataanalytics"
            
        }
#        stdout { codec => rubydebug }
    }
#    if ("_grokparsefailure" in [tags]) {
#        stdout { codec => json }
#    }
}





filter {
    csv {
        columns => ["PANDAID",
                    "MODIFICATIONTIME",
                    "JOBDEFINITIONID",
                    "SCHEDULERID",
                    "PILOTID",
                    "CREATIONTIME",
                    "CREATIONHOST",
                    "MODIFICATIONHOST",
                    "ATLASRELEASE",
                    "TRANSFORMATION",
                    "HOMEPACKAGE",
                    "PRODSERIESLABEL",
                    "PRODSOURCELABEL",
                    "PRODUSERID",
                    "ASSIGNEDPRIORITY",
                    "CURRENTPRIORITY",
                    "ATTEMPTNR",
                    "MAXATTEMPT",
                    "JOBSTATUS",
                    "JOBNAME",
                    "MAXCPUCOUNT",
                    "MAXCPUUNIT",
                    "MAXDISKCOUNT",
                    "MAXDISKUNIT",
                    "IPCONNECTIVITY",
                    "MINRAMCOUNT",
                    "MINRAMUNIT",
                    "STARTTIME",
                    "ENDTIME",
                    "CPUCONSUMPTIONTIME",
                    "CPUCONSUMPTIONUNIT",
                    "COMMANDTOPILOT",
                    "TRANSEXITCODE",
                    "PILOTERRORCODE",
                    "PILOTERRORDIAG",
                    "EXEERRORCODE",
                    "EXEERRORDIAG",
                    "SUPERRORCODE",
                    "SUPERRORDIAG",
                    "DDMERRORCODE",
                    "DDMERRORDIAG",
                    "BROKERAGEERRORCODE",
                    "BROKERAGEERRORDIAG",
                    "JOBDISPATCHERERRORCODE",
                    "JOBDISPATCHERERRORDIAG",
                    "TASKBUFFERERRORCODE",
                    "TASKBUFFERERRORDIAG",
                    "COMPUTINGSITE",
                    "COMPUTINGELEMENT",
                    "PRODDBLOCK",
                    "DISPATCHDBLOCK",
                    "DESTINATIONDBLOCK",
                    "DESTINATIONSE",
                    "NEVENTS",
                    "GRID",
                    "CLOUD",
                    "CPUCONVERSION",
                    "SOURCESITE",
                    "DESTINATIONSITE",
                    "TRANSFERTYPE",
                    "TASKID",
                    "CMTCONFIG",
                    "STATECHANGETIME",
                    "PRODDBUPDATETIME",
                    "LOCKEDBY",
                    "RELOCATIONFLAG",
                    "JOBEXECUTIONID",
                    "VO",
                    "PILOTTIMING",
                    "WORKINGGROUP",
                    "PROCESSINGTYPE",
                    "PRODUSERNAME",
                    "NINPUTFILES",
                    "COUNTRYGROUP",
                    "BATCHID",
                    "PARENTID",
                    "SPECIALHANDLING",
                    "JOBSETID",
                    "CORECOUNT",
                    "NINPUTDATAFILES",
                    "INPUTFILETYPE",
                    "INPUTFILEPROJECT",
                    "INPUTFILEBYTES",
                    "NOUTPUTDATAFILES",
                    "OUTPUTFILEBYTES",
                    "JOBPARAMETERS",
                    "METADATA"]
        }

    # convert fields to integers
    mutate {
        convert => [ "PANDAID", "integer" ]
        convert => [ "JOBDEFINITIONID", "integer" ]
        convert => [ "ASSIGNEDPRIORITY", "integer" ]
        convert => [ "CURRENTPRIORITY", "integer" ]
        convert => [ "ATTEMPTNR", "integer" ]
        convert => [ "MAXATTEMPT", "integer" ]
        convert => [ "MAXCPUCOUNT", "integer" ]
        convert => [ "MAXDISKCOUNT", "integer" ]
        convert => [ "MINRAMCOUNT", "integer" ]
        convert => [ "CPUCONSUMPTIONTIME", "integer" ]
        convert => [ "TRANSEXITCODE", "integer" ]
        convert => [ "PILOTERRORCODE", "integer" ]
        convert => [ "EXEERRORCODE", "integer" ]
        convert => [ "SUPERRORCODE", "integer" ]
        convert => [ "DDMERRORCODE", "integer" ]
        convert => [ "BROKERAGEERRORCODE", "integer" ]
        convert => [ "JOBDISPATCHERERRORCODE", "integer" ]
        convert => [ "TASKBUFFERERRORCODE", "integer" ]
        convert => [ "NEVENTS", "integer" ]
        convert => [ "TASKID", "integer" ]
        convert => [ "JOBEXECUTIONID", "integer" ]
        convert => [ "JOBSETID", "integer" ]
        convert => [ "CORECOUNT", "integer" ]
        convert => [ "NINPUTDATAFILES", "integer" ]
        convert => [ "INPUTFILEBYTES", "integer" ]
        convert => [ "NOUTPUTDATAFILES", "integer" ]
        convert => [ "OUTPUTFILEBYTES", "integer" ]
    }

    # strip fields of whitespace
    mutate {
        strip => [ "IPCONNECTIVITY", "MAXDISKUNIT", "MINRAMUNIT" ]
    }
    
    #split pilot timing fields
    if [PILOTTIMING] {
        ruby {
            code => "fields = event['PILOTTIMING'].split(/\|/); event['get_job_consumption'] = fields[0]; event['stage_in_consumption']= fields[1]; event['payload_consumption'] = fields[2]; event['stage_out_consumption'] = fields[3]; event['setup_consumption'] = fields[4]"
        }
    }

    # handle units modifiers for disk and ram fields
    if [MINRAMCOUNT] and [MINRAMUNIT] {
        ruby {
            code => "if event['MINRAMUNIT'] == 'MB'; event['MINRAMCOUNT'] = event['MINRAMCOUNT'] * 1048576; end"
        }
        ruby {
            code => "if event['MINRAMUNIT'] == 'GB'; event['MINRAMCOUNT'] = event['MINRAMCOUNT'] * 1073741824; end"
            remove_field => ["MINRAMUNIT"]
        }
    }

    if [MAXDISKCOUNT] and [MAXDISKUNIT] {
        ruby {
            code => "if event['MAXDISKUNIT'] == 'MB'; event['MAXDISKCOUNT'] = event['MAXDISKCOUNT'] * 1048576; end"
            remove_field => ["MAXDISKUNIT"]
        }
        ruby {
            code => "if event['MAXDISKUNIT'] == 'GB'; event['MAXDISKCOUNT'] = event['MAXDISKCOUNT'] * 1073741824; end"
            remove_field => ["MAXDISKUNIT"]
        }
    }

    # convert fields that ruby filters changed
    mutate {
        convert => [ "get_job_consumption", "integer" ]
        convert => [ "stage_in_consumption", "integer" ]
        convert => [ "payload_consumption", "integer" ]
        convert => [ "stage_out_consumption", "integer" ]
        convert => [ "setup_consumption", "integer" ]
        convert => [ "min_ram_unit", "integer" ]
        convert => [ "max_disk_count", "integer" ]
    }

    

    # create calculated fields
    if [payload_consumption] and [CPUCONSUMPTIONTIME] and [CORECOUNT] {
        ruby {
            code => "if event['payload_consumption'].to_i == 0
                     then
                       event['job_efficiency'] = nil
                     else
                       event['job_efficiency'] = event['CPUCONSUMPTIONTIME'].to_f / (event['payload_consumption'].to_f * event['CORECOUNT'])
                     end"
        }
    }
    if [payload_consumption] and [CPUCONSUMPTIONTIME] {
        ruby {
            code => "if event['payload_consumption'].to_i == 0
                     then
                       event['job_efficiency'] = nil
                     else
                         event['job_efficiency'] = event['CPUCONSUMPTIONTIME'].to_f / event['payload_consumption'].to_f
                     end"
        }
    }

    if [STARTTIME] and [ENDTIME] {
        ruby {
            code => "event['job_duration'] = event['ENDTIME'].to_i - event['STARTTIME'].to_i"
        }
    }

    if [STARTTIME] and [CREATIONTIME] {
        ruby {
            code => "event['queue_time'] = event['STARTTIME'].to_i - event['CREATIONTIME'].to_i"
        }
    }

    # convert date fields
    if [MODIFICATIONTIME] {
        ruby {
            code => 'require "date"; event["MODIFICATIONTIME"]  = DateTime.strptime(event["MODIFICATIONTIME"], "%s").iso8601'
        }
    }

    if [CREATIONTIME] {
        ruby {
            code => 'require "date"; event["CREATIONTIME"]  = DateTime.strptime(event["CREATIONTIME"], "%s").iso8601'
        }
    }

    if [STARTTIME] {
        ruby {
            code => 'require "date"; event["STARTTIME"]  = DateTime.strptime(event["STARTTIME"], "%s").iso8601'
        }
    }

    if [ENDTIME] {
        ruby {
            code => 'require "date"; event["ENDTIME"]  = DateTime.strptime(event["ENDTIME"], "%s").iso8601'
        }
    }

    if [PRODDBUPDATETIME] {
        ruby {
            code => 'require "date"; event["PRODDBUPDATETIME"]  = DateTime.strptime(event["PRODDBUPDATETIME"], "%s").iso8601'
        }
    }

    # set timestamp
    date {
        match => ["CREATIONTIME", "ISO8601" ]
    }



}


